package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"evaluation/adapter/api/graphql/dto"
	"time"
)

// Datapoints is the resolver for the datapoints field.
func (r *queryResolver) Datapoints(_ context.Context, start *time.Time, end *time.Time) ([]*dto.Datapoint, error) {
	datapoints := r.DatapointRepository.FindForTime(start, end)
	var datapointDTOs []*dto.Datapoint
	for _, dp := range datapoints {
		datapointDTOs = append(datapointDTOs, &dto.Datapoint{
			Value: dp.Value,
			Date:  dp.Date,
		})
	}
	return datapointDTOs, nil
}

// AverageValue is the resolver for the averageValue field.
func (r *queryResolver) AverageValue(_ context.Context, start *time.Time, end *time.Time) (float64, error) {
	return r.StatisticService.AverageValue(start, end), nil
}

// MaxDatapoint is the resolver for the maxDatapoint field.
func (r *queryResolver) MaxDatapoint(_ context.Context, start *time.Time, end *time.Time) (*dto.Datapoint, error) {
	datapoint := r.StatisticService.MaxDatapoint(start, end)

	return &dto.Datapoint{
		Value: datapoint.Value,
		Date:  datapoint.Date,
	}, nil
}

// MinDatapoint is the resolver for the minDatapoint field.
func (r *queryResolver) MinDatapoint(_ context.Context, start *time.Time, end *time.Time) (*dto.Datapoint, error) {
	datapoint := r.StatisticService.MinDatapoint(start, end)

	return &dto.Datapoint{
		Value: datapoint.Value,
		Date:  datapoint.Date,
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
